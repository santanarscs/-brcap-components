{
    "pipes": [],
    "interfaces": [
        {
            "name": "ButtonTypes",
            "id": "interface-ButtonTypes-82ad1ce212708736ecca63cb32b90e2d73f43e514b5a80bc352aaba3412b0d6cbf90e2c223677c0a47ef7d027db005b310230136e7d94eb887d930e6236f1775",
            "file": "src/app/components/button/button.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ButtonTypes {\n  variant: 'primary' | 'secondary' | 'danger' | 'default';\n  size: 'small' | 'normal' | 'large';\n  icon?: HTMLElement;\n  pill?: boolean;\n  disabled?: boolean;\n  classes?: string;\n  isLoading?: boolean;\n}\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "pill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"small\" | \"normal\" | \"large\"",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"primary\" | \"secondary\" | \"danger\" | \"default\"",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-7c7a506a3192811c5a3950b2d16f8b5e57fee2a1a0c0fa5ecb471785a255938484e7dc41ae1f25f28b47d7dd8c6164d387c772f4c5d97f8f2fb7f55e13d6b224",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    name: ['', Validators.required],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "defaultValue": "'teste'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'teste';\n  form = this.fb.group({\n    name: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit() {\n    console.log(this.form.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"flex items-center justify-center mt-10\">\n  <cap-card>\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <cap-input \n        label=\"Nome\"\n        errorMessage=\"Nome é obrigatório...\"\n        [formControlName]=\"'name'\"\n      ></cap-input>\n      <cap-button \n        classes=\"mt-4 w-full\"\n        variant=\"primary\" \n        [isLoading]=\"false\" \n        [disabled]=\"form.invalid\">Enviar</cap-button>\n    </form>\n  </cap-card>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-547d990870f2f9d2b44ab9b106ca9cc371e55f25cb60923a0759c287d4abdedc6c1fbd94dd03bc8e27d18867e0916342545d2c46c130a4f2a816e4205d490f33",
            "file": "src/app/components/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cap-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "HTMLElement",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "pill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "\"small\" | \"normal\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "\"primary\" | \"secondary\" | \"danger\" | \"default\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'button', {static: true}"
                        }
                    ]
                },
                {
                    "name": "styles",
                    "defaultValue": "{\n    base: 'focus:outline-none focus:ring-2 focus:ring-offset-2 transition ease-in-out duration-300 rounded-sm flex items-center justify-center',\n    disabled: 'opacity-50 cursor-not-allowed',\n    pill: 'rounded-full',\n    size: {\n      small: 'w-24 h-7 text-sm',\n      normal: 'w-36 h-10',\n      large: 'w-48 h-14 text-lg',\n    },\n    variant: {\n      primary:\n        'bg-blue-500 hover:bg-blue-600 focus:ring-blue-500 focus:ring-opacity-50 text-white',\n      secondary:\n        'bg-green-500 hover:bg-green-600 focus:ring-green-500 focus:ring-opacity-50 text-white',\n      danger:\n        'bg-red-500 hover:bg-red-600 focus:ring-red-500 focus:ring-opacity-50 text-white',\n      default:\n        'bg-gray-200 hover:bg-gray-600 focus:ring-gray-500 focus:ring-opacity-50 text-gray-800 hover:text-white',\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnInit,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\n\n@Component({\n  selector: 'cap-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonComponent {\n  @Input()\n  variant: 'primary' | 'secondary' | 'danger' | 'default' = 'default';\n  @Input()\n  size: 'small' | 'normal' | 'large' = 'normal';\n  @Input()\n  icon?: HTMLElement;\n  @Input()\n  pill?: boolean;\n  @Input()\n  disabled?: boolean = false;\n  @Input()\n  classes?: string;\n  @Input()\n  isLoading?: boolean = false;\n\n  @Input()\n  label!: string;\n\n  @ViewChild('button', { static: true }) button!: ElementRef;\n\n  private readonly styles = {\n    base: 'focus:outline-none focus:ring-2 focus:ring-offset-2 transition ease-in-out duration-300 rounded-sm flex items-center justify-center',\n    disabled: 'opacity-50 cursor-not-allowed',\n    pill: 'rounded-full',\n    size: {\n      small: 'w-24 h-7 text-sm',\n      normal: 'w-36 h-10',\n      large: 'w-48 h-14 text-lg',\n    },\n    variant: {\n      primary:\n        'bg-blue-500 hover:bg-blue-600 focus:ring-blue-500 focus:ring-opacity-50 text-white',\n      secondary:\n        'bg-green-500 hover:bg-green-600 focus:ring-green-500 focus:ring-opacity-50 text-white',\n      danger:\n        'bg-red-500 hover:bg-red-600 focus:ring-red-500 focus:ring-opacity-50 text-white',\n      default:\n        'bg-gray-200 hover:bg-gray-600 focus:ring-gray-500 focus:ring-opacity-50 text-gray-800 hover:text-white',\n    },\n  };\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  public get classNames(): string {\n    return [\n      this.styles.base,\n      this.styles.size[this.size],\n      this.styles.variant[this.variant],\n      this.pill && this.styles.pill,\n      this.disabled && this.styles.disabled,\n      this.classes,\n    ].join(' ');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 58
            },
            "accessors": {
                "classNames": {
                    "name": "classNames",
                    "getSignature": {
                        "name": "classNames",
                        "type": "string",
                        "returnType": "string",
                        "line": 64
                    }
                }
            },
            "templateData": "<button [class]=\"classNames\">\n  <div *ngIf=\"!isLoading; else showLoading\">\n    {{label}}\n    <ng-content></ng-content>\n  </div>\n  <ng-template #showLoading>\n    <cap-loading></cap-loading>\n  </ng-template>\n</button>\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-ef6eb8ad6b0778f59657a3dab0e44295227871d0620bf5b92142eea181668c4578c7968c047676e865ca2d14a186af221c3df3d1ce4db05f1ada73c0a1a5d776",
            "file": "src/app/components/card/card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cap-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\n\n@Component({\n  selector: 'cap-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CardComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"bg-white p-4 rounded-sm border border-gray-300\">\n  <ng-content></ng-content>\n</div>"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-8167d80bb298dee85fbb5274d6fa1e29a4dba1aaa4fea2a913b15687f13e5de0ababd36f33f125b8ad3876ac48b6e5afe6eba9be37c9c5abfe93abb534f8f452",
            "file": "src/app/components/input/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: InputComponent, multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "cap-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "formControlDirective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControlDirective",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "FormControlDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hasError",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlContainer,\n  ControlValueAccessor,\n  FormControl,\n  FormControlDirective,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\n\n@Component({\n  selector: 'cap-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: InputComponent,\n      multi: true,\n    },\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputComponent implements ControlValueAccessor {\n  @Input() label!: string;\n  @Input() errorMessage!: string;\n\n  @Input() formControl!: FormControl;\n  @Input() formControlName!: string;\n\n  @ViewChild(FormControlDirective, { static: true })\n  formControlDirective!: FormControlDirective;\n  private value!: string;\n  private disabled!: boolean;\n\n  constructor(private controlContainer: ControlContainer) {}\n\n  get control() {\n    return (\n      this.formControl ||\n      this.controlContainer?.control?.get(this.formControlName)\n    );\n  }\n\n  registerOnTouched(fn: any): void {\n    this.formControlDirective?.valueAccessor?.registerOnTouched(fn);\n  }\n\n  registerOnChange(fn: any): void {\n    this.formControlDirective?.valueAccessor?.registerOnChange(fn);\n  }\n\n  writeValue(obj: any): void {\n    this.formControlDirective?.valueAccessor?.writeValue(obj);\n  }\n\n  hasError(): boolean {\n    return (\n      (this.control?.invalid && (this.control.dirty || this.control.touched)) ||\n      false\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".floating-input>input::placeholder {\n  color: transparent;\n}\n\n.floating-input>input:focus,\n.floating-input>input:not(:placeholder-shown) { \n@apply pt-8\n}\n\n.floating-input>input:focus~label, \n.floating-input>input:not(:placeholder-shown)~label {\n@apply opacity-75 scale-75 -translate-y-3 translate-x-1 text-blue-500; \n}\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            },
            "templateData": "<div class=\"floating-input relative\">\n  <input\n    [formControl]=\"control\"\n    class=\"\n      border border-gray-200\n      focus:outline-none\n      rounded-md\n      focus:border-blue-500\n      focus:shadow-sm\n      w-full\n      p-3\n      h-16\n    \"\n    placeholder=\"name@example.com\"\n    autocomplete=\"off\"\n  />\n  <label\n    class=\"\n      absolute\n      top-0\n      left-0\n      px-3\n      py-5\n      h-full\n      pointer-events-none\n      transform\n      origin-left\n      transition-all\n      duration-100\n      ease-in-out\n    \"\n  >\n    {{ label }}\n  </label>\n</div>\n<span class=\"text-xs text-red-500 flex items-center mt-1\" *ngIf=\"hasError()\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\" class=\"h-3 w-3 mr-1\">\n    <path\n       fill=\"currentColor\"\n      d=\"M310.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L160 210.7 54.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L114.7 256 9.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 301.3 265.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L205.3 256 310.6 150.6z\"\n    />\n  </svg>\n  {{ errorMessage }}\n</span>\n"
        },
        {
            "name": "LoadingComponent",
            "id": "component-LoadingComponent-dab5f5c171283dfd701143588b6b3f07036632ab583e0c9f99cb8bed2ee614346d67bf31b78d4ade4f6313da542f493e68e07f7a1bf73a059a3ba1a417c5755c",
            "file": "src/app/components/loading/loading.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cap-loading",
            "styleUrls": [
                "./loading.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\n\n@Component({\n  selector: 'cap-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoadingComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./loading.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<svg class=\"animate-spin -ml-1 h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n  <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n  <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n</svg>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-d3dcacf372a56e971922e9a9c901f71a63f035871ba1b1d7e879988550bd59f8e0c2ee52f4952563f8cd412db06384c3e62343ccbcd0ff2a4d55c833165bb17f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { ButtonComponent } from './components/button/button.component';\nimport { CardComponent } from './components/card/card.component';\nimport { InputComponent } from './components/input/input.component';\nimport { LoadingComponent } from './components/loading/loading.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ButtonComponent,\n    CardComponent,\n    InputComponent,\n    LoadingComponent,\n  ],\n  imports: [BrowserModule, ReactiveFormsModule],\n  providers: [],\n  bootstrap: [AppComponent],\n  exports: [ButtonComponent, CardComponent, InputComponent, LoadingComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "LoadingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "LoadingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/loading/Loading.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Example",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Example",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/input/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Example",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n  template: `\n  <div class=\"flex space-x-2 items-center justify-center\">\n    <cap-button\n    variant=\"primary\"\n    [pill]=\"pill\"\n    [disabled]=\"disabled\"\n    [isLoading]=\"isLoading\"\n    [size]=\"size\"\n    >Botao</cap-button>\n    <cap-button\n    variant=\"secondary\"\n    [pill]=\"pill\"\n    [disabled]=\"disabled\"\n    [isLoading]=\"isLoading\"\n    [size]=\"size\"\n    >Botao</cap-button>\n    <cap-button\n    variant=\"danger\"\n    [pill]=\"pill\"\n    [disabled]=\"disabled\"\n    [isLoading]=\"isLoading\"\n    [size]=\"size\"\n    >Botao</cap-button>\n    <cap-button\n    variant=\"default\"\n    [pill]=\"pill\"\n    [disabled]=\"disabled\"\n    [isLoading]=\"isLoading\"\n    [size]=\"size\"\n    >Botao</cap-button>\n  </div>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/input/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => {\n  const form: FormGroup = new FormGroup({\n    name: new FormControl(''),\n  });\n  return {\n    props: {\n      ...args,\n      form,\n    },\n    template: `\n    <form [formGroup]=\"form\">\n        <cap-input \n          label=\"Nome\"\n          errorMessage=\"Nome é obrigatório...\"\n          [formControlName]=\"'name'\"\n        ></cap-input>\n      </form>\n    `,\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CardComponent>",
                "defaultValue": "(args: CardComponent) => ({\n  props: args,\n  template: `\n    <cap-card>\n      Isso é um texto de exemplo\n    </cap-card>\n  `,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/components/loading/Loading.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/loading/Loading.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/components/button/Button.stories.ts": [
                {
                    "name": "Example",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n  template: `\n  <div class=\"flex space-x-2 items-center justify-center\">\n    <cap-button\n    variant=\"primary\"\n    [pill]=\"pill\"\n    [disabled]=\"disabled\"\n    [isLoading]=\"isLoading\"\n    [size]=\"size\"\n    >Botao</cap-button>\n    <cap-button\n    variant=\"secondary\"\n    [pill]=\"pill\"\n    [disabled]=\"disabled\"\n    [isLoading]=\"isLoading\"\n    [size]=\"size\"\n    >Botao</cap-button>\n    <cap-button\n    variant=\"danger\"\n    [pill]=\"pill\"\n    [disabled]=\"disabled\"\n    [isLoading]=\"isLoading\"\n    [size]=\"size\"\n    >Botao</cap-button>\n    <cap-button\n    variant=\"default\"\n    [pill]=\"pill\"\n    [disabled]=\"disabled\"\n    [isLoading]=\"isLoading\"\n    [size]=\"size\"\n    >Botao</cap-button>\n  </div>\n  `,\n})"
                }
            ],
            "src/app/components/input/Input.stories.ts": [
                {
                    "name": "Example",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/input/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/input/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => {\n  const form: FormGroup = new FormGroup({\n    name: new FormControl(''),\n  });\n  return {\n    props: {\n      ...args,\n      form,\n    },\n    template: `\n    <form [formGroup]=\"form\">\n        <cap-input \n          label=\"Nome\"\n          errorMessage=\"Nome é obrigatório...\"\n          [formControlName]=\"'name'\"\n        ></cap-input>\n      </form>\n    `,\n  };\n}"
                }
            ],
            "src/app/components/card/Card.stories.ts": [
                {
                    "name": "Example",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CardComponent>",
                    "defaultValue": "(args: CardComponent) => ({\n  props: args,\n  template: `\n    <cap-card>\n      Isso é um texto de exemplo\n    </cap-card>\n  `,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ButtonTypes",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/loading/Loading.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/loading/loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}